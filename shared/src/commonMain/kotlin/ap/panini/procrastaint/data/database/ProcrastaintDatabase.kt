package ap.panini.procrastaint.data.database

import androidx.room.AutoMigration
import androidx.room.ConstructedBy
import androidx.room.Database
import androidx.room.RoomDatabase
import androidx.room.RoomDatabaseConstructor
import androidx.room.migration.Migration
import androidx.sqlite.SQLiteConnection
import androidx.sqlite.execSQL
import ap.panini.procrastaint.data.database.dao.NetworkSyncDao
import ap.panini.procrastaint.data.database.dao.TaskDao
import ap.panini.procrastaint.data.entities.NetworkSyncItem
import ap.panini.procrastaint.data.entities.TaskCompletion
import ap.panini.procrastaint.data.entities.TaskInfo
import ap.panini.procrastaint.data.entities.TaskMeta
import ap.panini.procrastaint.data.entities.TaskTag
import ap.panini.procrastaint.data.entities.TaskTagCrossRef

@Database(
    entities = [
        TaskInfo::class,
        TaskMeta::class,
        TaskCompletion::class,
        TaskTag::class,
        TaskTagCrossRef::class,
        NetworkSyncItem::class
    ],
    version = 3,
    autoMigrations = [
        AutoMigration(from = 1, to = 2)
    ]
)
@ConstructedBy(ProcrastaintDatabaseConstructor::class)
abstract class ProcrastaintDatabase : RoomDatabase() {
    abstract fun getTaskDao(): TaskDao
    abstract fun getNetworkSyncDao(): NetworkSyncDao
}

val MIGRATION_2_3 = object : Migration(2, 3) {
    override fun migrate(connection: SQLiteConnection) {
        connection.execSQL("CREATE TABLE `TaskTagCrossRef_new` (`taskId` INTEGER NOT NULL, `tagId` INTEGER NOT NULL, PRIMARY KEY(`taskId`, `tagId`), FOREIGN KEY(`taskId`) REFERENCES `TaskInfo`(`taskId`) ON UPDATE NO ACTION ON DELETE CASCADE , FOREIGN KEY(`tagId`) REFERENCES `TaskTag`(`tagId`) ON UPDATE NO ACTION ON DELETE CASCADE )")
        connection.execSQL("INSERT INTO `TaskTagCrossRef_new` (`taskId`, `tagId`) SELECT `taskId`, `tagId` FROM `TaskTagCrossRef`")
        connection.execSQL("DROP TABLE `TaskTagCrossRef`")
        connection.execSQL("ALTER TABLE `TaskTagCrossRef_new` RENAME TO `TaskTagCrossRef`")
        connection.execSQL("CREATE INDEX IF NOT EXISTS `index_TaskTagCrossRef_tagId` ON `TaskTagCrossRef` (`tagId`)")
    }
}

// constructor generated by compiler
@Suppress("NO_ACTUAL_FOR_EXPECT")
expect object ProcrastaintDatabaseConstructor : RoomDatabaseConstructor<ProcrastaintDatabase> {
    override fun initialize(): ProcrastaintDatabase
}
